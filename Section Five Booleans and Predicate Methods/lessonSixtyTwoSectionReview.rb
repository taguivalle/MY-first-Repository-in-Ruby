print "Congratulations on reaching the end of another course section. So as always, let is take a fer 
moments to review everything that we learned. WE began this section by learning about Booleans, which 
are named after the English mathematician George Bool. And a Boolean is a value tha tis either ture or 
false.\n\n"
print "First: A Boolean is a value that is either true or false. It is of those two values. And booleans
exist for logical expressions of truth in the real world. We need to find out something is tru or false
whether something is valid or invalid. so Ruby often return booleans for logical expressions and for 
statements of truth to validate that something is true or real or valid.\n\n"
print "OPERATION THAT RETURN.\n\n"
print "So for example, there is many diffent operations that can return booleans, for example, the
equality operator (==) checks if two objects are equal and we can use it to compare, for example, two
strings or two integer and check if they are the same value.\n\n"
puts "house" == "house"
puts
print "In addition, booleans can also be generated by things like the inequality operator, which checks
the inverse. It checks if two objects are unequal and the operators work the exact same way. We put two
objects on the sides of those symbols. In this case, I tis the double equal sign for the equality 
operator and the exclamation point equal sign for the inequal operator.\n\n"
puts 10 != 5
puts
print "And Ruby evaluates taht expession and gives you back a boolean, a true or a false. And in 
addition, some other common operations that will generate booleans are methematical comparisons like
less than greater, than less than or equal to greater than or equal to. These are all expressions that 
return satements of validity. And so a boolean, a true or a false is the best way to reglest that 
result, that relationship.\n\n"
puts 5 >= 3
puts -9 <= -15
puts
print "PREDICATE METHODS.\n\n"
print "WE also talked about predicate methods, sometimes also called booleans methods, and they are
simply methods that return a boolean value, a true or a false. In Ruby, the convewntion is that 
predicate methods will end with a question mark in their name.\n\n"
print "Once again, the question mark is not something technically significant, it is just valid 
character and it is character added at the end of that method name. And so we explored predicate methods 
like odd, even, positive, negative ,between, all of these methods will return true or false?\n\n"
print "METHODS WITH ARGUMENTS.\n\n"
print "And finally, we talked about methods with arguments. An arguments is simply an input to a method 
when we invoke it. An arguemnt provides some kind of value that the method uses when it runs. So not 
every methods is going to be the same. some methods can have no arguments, some methods can have one 
argument, some can have multiple arguments.\n\n"
print "Sometimes the arguments are requiered, sometimes they are optional. So the context of how a 
method works really depends on each specific method. What an argurment repesents depends on what method
it is being used with, right? And as far as the syntax, we pass the argumetns after the method 
invocation, which is jsut the dot on the object and then the method name.\n\n"
print "And tehn between every two subsequent arguments we provide a comma and a space. The comma is 
technically requiered so that Ruby can distinguish where one argument ends ands and the next one begins
and the space is just for readability.  So all of our arguments don't clump together and we can more 
easily the separation between them.\n\n"
print "And as far as the best practices int he Ruby community, if a method does dont accept any 
arguments, Generally it is recommended to exclude or omit the parentheses entirely and that way is just
reads very cleanly.\n\n"
print "However, if a method accepts arguments, I would argue the best prectice is to include the 
parentheses. No matter now many arguments you have, those preferences will differ from developer to 
developer and from code base to code base. But I think it is a reasonable standard that you will find 
in a lot of Ruby code bases.\n\n"
print "That is all there is to cover in this section. Hope you had fun. And with that, I will see you 
in the next lesson."